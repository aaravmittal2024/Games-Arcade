from tkinter import Frame, Label, CENTER
import numpy as np
import matplotlib.pyplot as plt
import random 

# Constants for the game
EDGE_LENGTH = 400
CELL_COUNT = 4
CELL_PAD = 10
UP_KEY = "'w'"
DOWN_KEY = "'s'"
LEFT_KEY = "'a'"
RIGHT_KEY = "'d'"
AI_KEY = "'q'"
AI_PLAY_KEY = "'p'"
LABEL_FONT = ("Verdana", 40, "bold")
GAME_COLOR = "#a6bdbb"
EMPTY_COLOR = "#8eaba8"

TILE_COLORS = {
    2: "#daeddf", 4: "#9ae3ae", 8: "#6ce68d", 16: "#42ed71",
    32: "#17e650", 64: "#17c246", 128: "#149938",
    256: "#107d2e", 512: "#0e6325", 1024: "#0b4a1c",
    2048: "#031f0a", 4096: "#000000", 8192: "#000000",
}

LABEL_COLORS = {
    2: "#011c08", 4: "#011c08", 8: "#011c08", 16: "#011c08",
    32: "#011c08", 64: "#f2f2f0", 128: "#f2f2f0",
    256: "#f2f2f0", 512: "#f2f2f0", 1024: "#f2f2f0",
    2048: "#f2f2f0", 4096: "#f2f2f0", 8192: "#f2f2f0",
}

POSSIBLE_MOVES_COUNT = 4
NUMBER_OF_SQUARES = CELL_COUNT * CELL_COUNT
NEW_TILE_DISTRIBUTION = np.array([2, 2, 2, 2, 2, 2, 2, 2, 2, 4])

# Game Functions
def initialize_game():
    """Initialize the game board."""
    board = np.zeros((NUMBER_OF_SQUARES), dtype="int")
    initial_twos = np.random.default_rng().choice(NUMBER_OF_SQUARES, 2, replace=False)
    board[initial_twos] = 2
    board = board.reshape((CELL_COUNT, CELL_COUNT))
    return board

def push_board_right(board):
    """Push the board to the right."""
    new = np.zeros((CELL_COUNT, CELL_COUNT), dtype="int")
    done = False
    for row in range(CELL_COUNT):
        count = CELL_COUNT - 1
        for col in range(CELL_COUNT - 1, -1, -1):
            if board[row][col] != 0:
                new[row][count] = board[row][col]
                if col != count:
                    done = True
                count -= 1
    return (new, done)

def merge_elements(board):
    """Merge elements in the board."""
    score = 0
    done = False
    for row in range(CELL_COUNT):
        for col in range(CELL_COUNT - 1, 0, -1):
            if board[row][col] == board[row][col-1] and board[row][col] != 0:
                board[row][col] *= 2
                score += board[row][col]
                board[row][col-1] = 0
                done = True
    return (board, done, score)

def move_up(board):
    """Move the board up."""
    rotated_board = np.rot90(board, -1)
    pushed_board, has_pushed = push_board_right(rotated_board)
    merged_board, has_merged, score = merge_elements(pushed_board)
    second_pushed_board, _ = push_board_right(merged_board)
    rotated_back_board = np.rot90(second_pushed_board)
    move_made = has_pushed or has_merged
    return rotated_back_board, move_made, score

def move_down(board):
    """Move the board down."""
    board = np.rot90(board)
    board, has_pushed = push_board_right(board)
    board, has_merged, score = merge_elements(board)
    board, _ = push_board_right(board)
    board = np.rot90(board, -1)
    move_made = has_pushed or has_merged
    return board, move_made, score

def move_left(board):
    """Move the board left."""
    board = np.rot90(board, 2)
    board, has_pushed = push_board_right(board)
    board, has_merged, score = merge_elements(board)
    board, _ = push_board_right(board)
    board = np.rot90(board, -2)
    move_made = has_pushed or has_merged
    return board, move_made, score

def move_right(board):
    """Move the board right."""
    board, has_pushed = push_board_right(board)
    board, has_merged, score = merge_elements(board)
    board, _ = push_board_right(board)
    move_made = has_pushed or has_merged
    return board, move_made, score

def add_new_tile(board):
    """Add a new tile to the board."""
    tile_value = NEW_TILE_DISTRIBUTION[np.random.randint(0, len(NEW_TILE_DISTRIBUTION))]
    tile_row_options, tile_col_options = np.nonzero(np.logical_not(board))
    tile_loc = np.random.randint(0, len(tile_row_options))
    board[tile_row_options[tile_loc], tile_col_options[tile_loc]] = tile_value
    return board

def check_for_win(board):
    """Check if the player has won."""
    return 2048 in board

# AI Constants
NUMBER_OF_MOVES = 4
SAMPLE_COUNT = 50
SPM_SCALE_PARAM = 10
SL_SCALE_PARAM = 4
SEARCH_PARAM = 200

# AI Functions
def random_move(board):
    """Make a random move on the board."""
    moves = [move_up, move_down, move_left, move_right]
    chosen_move = random.choice(moves)
    new_board, move_made, score = chosen_move(board)
    return new_board, move_made, score

def get_search_params(move_number):
    """Get search parameters for the AI."""
    searches_per_move = SPM_SCALE_PARAM * (1+(move_number // SEARCH_PARAM))
    search_length = SL_SCALE_PARAM * (1+(move_number // SEARCH_PARAM))
    return searches_per_move, search_length

def ai_move(board, searches_per_move, search_length):
    """Make an AI move."""
    possible_first_moves = [move_left, move_up, move_down, move_right]
    first_move_scores = np.zeros(NUMBER_OF_MOVES)
    for first_move_index in range(NUMBER_OF_MOVES):
        first_move_function =  possible_first_moves[first_move_index]
        board_with_first_move, first_move_made, first_move_score = first_move_function(board)
        if first_move_made:
            board_with_first_move = add_new_tile(board_with_first_move)
            first_move_scores[first_move_index] += first_move_score
        else:
            continue
        for _ in range(searches_per_move):
            move_number = 1
            search_board = np.copy(board_with_first_move)
            game_valid = True
            while game_valid and move_number < search_length:
                search_board, game_valid, score = random_move(search_board)
                if game_valid:
                    search_board = add_new_tile(search_board)
                    first_move_scores[first_move_index] += score
                    move_number += 1
    best_move_index = np.argmax(first_move_scores)
    best_move = possible_first_moves[best_move_index]
    search_board, game_valid, score = best_move(board)
    return search_board, game_valid

def ai_play(board):
    """Let the AI play the game."""
    move_number = 0
    valid_game = True
    while valid_game:
        move_number += 1
        number_of_simulations, search_length = get_search_params(move_number)
        board, valid_game = ai_move(board, number_of_simulations, search_length)
        if valid_game:
            board = add_new_tile(board)
        if check_for_win(board):
            valid_game = False
        print(board)
        print(move_number)
    print(board)
    return np.amax(board)

def ai_plot(move_func):
    """Plot the AI's performance."""
    tick_locations = np.arange(1, 12)
    final_scores = []
    for _ in range(SAMPLE_COUNT):
        print('thing is ', _)
        board = initialize_game()
        game_is_win = ai(board)
        final_scores.append(game_is_win)
    all_counts = np.zeros(11)
    unique, counts = np.unique(np.array(final_scores), return_counts=True)
    unique = np.log2(unique).astype(int)
    index = 0

    for tick in tick_locations:
        if tick in unique:
            all_counts[tick-1] = counts[index]
            index += 1

    plt.bar(tick_locations, all_counts)
    plt.xticks(tick_locations, np.power(2, tick_locations))
    plt.xlabel("Score of Game", fontsize = 24)
    plt.ylabel(f"Frequency per {SAMPLE_COUNT} runs", fontsize = 24)
    plt.show()

# Display Class
class Display(Frame):
    """Main display class for the game."""
    
    def __init__(self):
        """Initialize the game display."""
        Frame.__init__(self)
        self.grid()
        self.master.title('2048')
        self.master.bind("<Key>", self.key_press)
        self.commands = {
            UP_KEY: move_up, 
            DOWN_KEY: move_down,
            LEFT_KEY: move_left, 
            RIGHT_KEY: move_right,
            AI_KEY: self.ai_action,  # AI action when 'q' is pressed
            AI_PLAY_KEY: self.ai_play_action  # AI play action when 'p' is pressed
        }
        self.grid_cells = []
        self.build_grid()
        self.init_matrix()
        self.draw_grid_cells()
        self.mainloop()

    def build_grid(self):
        """Build the game grid."""
        background = Frame(self, bg=GAME_COLOR, width=EDGE_LENGTH, height=EDGE_LENGTH)
        background.grid()
        for row in range(CELL_COUNT):
            grid_row = []
            for col in range(CELL_COUNT):
                cell = Frame(background, bg=EMPTY_COLOR, width=EDGE_LENGTH / CELL_COUNT, height=EDGE_LENGTH / CELL_COUNT)
                cell.grid(row=row, column=col, padx=CELL_PAD, pady=CELL_PAD)
                t = Label(master=cell, text="", bg=EMPTY_COLOR, justify=CENTER, font=LABEL_FONT, width=5, height=2)
                t.grid()
                grid_row.append(t)
            self.grid_cells.append(grid_row)

    def init_matrix(self):
        """Initialize the game matrix."""
        self.matrix = initialize_game()

    def draw_grid_cells(self):
        """Draw the cells on the grid."""
        for row in range(CELL_COUNT):
            for col in range(CELL_COUNT):
                tile_value = self.matrix[row][col]
                if not tile_value:
                    self.grid_cells[row][col].configure(text="", bg=EMPTY_COLOR)
                else:
                    self.grid_cells[row][col].configure(text=str(tile_value), bg=TILE_COLORS[tile_value], fg=LABEL_COLORS[tile_value])
        self.update_idletasks()

    def key_press(self, event):
        """Handle key press events."""
        key = repr(event.char)
        if key in self.commands:
            if key in [UP_KEY, DOWN_KEY, LEFT_KEY, RIGHT_KEY]:
                self.matrix, move_made, _ = self.commands[key](self.matrix)
                if move_made:
                    self.matrix = add_new_tile(self.matrix)
                    self.draw_grid_cells()
            else:
                self.commands[key]()

    def ai_action(self):
        """AI action when 'q' is pressed."""
        self.matrix, _ = ai_move(self.matrix, *get_search_params(0))
        self.draw_grid_cells()

    def ai_play_action(self):
        """AI play action when 'p' is pressed."""
        ai_play(self.matrix)
        self.draw_grid_cells()

gamegrid = Display()
