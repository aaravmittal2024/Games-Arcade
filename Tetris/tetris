import pygame
import sys
import random
pygame.init()


class Colors:
    dark_grey, green, red, orange, yellow, purple, cyan, blue, white, new_black, new_grey = \
    (26, 31, 40), (47, 230, 23), (232, 18, 18), (226, 116, 17), (237, 234, 4), (166, 0, 247), \
    (21, 204, 209), (13, 64, 216), (255, 255, 255), (0, 0, 0), (0, 0, 0)  
    text_color = (255, 255, 255)


    @classmethod
    def get_cell_colors(cls):
        return [cls.dark_grey, cls.green, cls.red, cls.orange, cls.yellow, cls.purple, cls.cyan, cls.blue]

class Position:
    def __init__(self, row, column):
        self.row = row
        self.column = column

class Block:
    def __init__(self, id, initial_positions):
        self.id = id
        self.positions = initial_positions
        self.rotation_index = 0

    def get_cell_positions(self):
        return self.positions[self.rotation_index]

    def rotate(self):
        self.rotation_index = (self.rotation_index + 1) % len(self.positions)

    def undo_rotation(self):
        self.rotation_index = (self.rotation_index - 1) % len(self.positions)

    def move(self, d_row, d_col):
        for position in self.positions[self.rotation_index]:
            position.row += d_row
            position.column += d_col
    
    def draw(self, screen, x_offset, y_offset):
        cell_colors = Colors.get_cell_colors()
        for position in self.get_cell_positions():
            pygame.draw.rect(screen, 
                             cell_colors[self.id],
                             (position.column * Grid.CELL_SIZE + x_offset, 
                              position.row * Grid.CELL_SIZE + y_offset, 
                              Grid.CELL_SIZE - 1, 
                              Grid.CELL_SIZE - 1))

    def rotate_around_center(self):
        # Only rotate if there are multiple rotations for this block
        if len(self.positions) > 1:
            center = self.get_center_of_rotation()
            
            # Rotate the block normally
            self.rotate()
            
            new_center = self.get_center_of_rotation()
            row_diff = center.row - new_center.row
            col_diff = center.column - new_center.column
            
            # Move all the tiles to compensate for the rotation difference
            for position in self.positions[self.rotation_index]:
                position.row += row_diff
                position.column += col_diff

    def get_center_of_rotation(self):
        # Default to the first position (this works for most blocks)
        return self.positions[self.rotation_index][1]


class IBlock(Block):
    def __init__(self):
        super().__init__(id=3, initial_positions={
            0: [Position(1, 0), Position(1, 1), Position(1, 2), Position(1, 3)],
            1: [Position(0, 2), Position(1, 2), Position(2, 2), Position(3, 2)],
            2: [Position(2, 0), Position(2, 1), Position(2, 2), Position(2, 3)],
            3: [Position(0, 1), Position(1, 1), Position(2, 1), Position(3, 1)]
        })
        self.move(-1, 3)

    def get_center_of_rotation(self):
        if self.rotation_index % 2 == 0:
            return Position(self.positions[self.rotation_index][1].row, self.positions[self.rotation_index][2].column)
        else:
            return Position(self.positions[self.rotation_index][2].row, self.positions[self.rotation_index][1].column)

class JBlock(Block):
    def __init__(self):
        super().__init__(id=2, initial_positions={
            0: [Position(0, 0), Position(1, 0), Position(1, 1), Position(1, 2)],
            1: [Position(0, 1), Position(0, 2), Position(1, 1), Position(2, 1)],
            2: [Position(1, 0), Position(1, 1), Position(1, 2), Position(2, 2)],
            3: [Position(0, 1), Position(1, 1), Position(2, 0), Position(2, 1)]
        })
        self.move(0, 3)

class LBlock(Block):
    def __init__(self):
        super().__init__(id=1, initial_positions={
            0: [Position(0, 2), Position(1, 0), Position(1, 1), Position(1, 2)],
            1: [Position(0, 1), Position(1, 1), Position(2, 1), Position(2, 2)],
            2: [Position(1, 0), Position(1, 1), Position(1, 2), Position(2, 0)],
            3: [Position(0, 0), Position(0, 1), Position(1, 1), Position(2, 1)]
        })
        self.move(0, 3)

class OBlock(Block):
    def __init__(self):
        super().__init__(id=4, initial_positions={
            0: [Position(0, 0), Position(0, 1), Position(1, 0), Position(1, 1)]
        })
        self.move(0, 4)

class SBlock(Block):
    def __init__(self):
        super().__init__(id=5, initial_positions={
            0: [Position(0, 1), Position(0, 2), Position(1, 0), Position(1, 1)],
            1: [Position(0, 1), Position(1, 1), Position(1, 2), Position(2, 2)],
            2: [Position(1, 1), Position(1, 2), Position(2, 0), Position(2, 1)],
            3: [Position(0, 0), Position(1, 0), Position(1, 1), Position(2, 1)]
        })
        self.move(0, 3)

class TBlock(Block):
    def __init__(self):
        super().__init__(id=6, initial_positions={
            0: [Position(0, 1), Position(1, 0), Position(1, 1), Position(1, 2)],
            1: [Position(0, 1), Position(1, 1), Position(1, 2), Position(2, 1)],
            2: [Position(1, 0), Position(1, 1), Position(1, 2), Position(2, 1)],
            3: [Position(0, 1), Position(1, 0), Position(1, 1), Position(2, 1)]
        })
        self.move(0, 3)

class ZBlock(Block):
    def __init__(self):
        super().__init__(id=7, initial_positions={
            0: [Position(0, 0), Position(0, 1), Position(1, 1), Position(1, 2)],
            1: [Position(0, 2), Position(1, 1), Position(1, 2), Position(2, 1)],
            2: [Position(1, 0), Position(1, 1), Position(2, 1), Position(2, 2)],
            3: [Position(0, 1), Position(1, 0), Position(1, 1), Position(2, 0)]
        })

class Grid:
    NUM_ROWS = 20
    NUM_COLS = 10
    CELL_SIZE = 30
    OFFSET = 11

    def __init__(self):
        self.grid = [[0] * self.NUM_COLS for _ in range(self.NUM_ROWS)]
        self.colors = Colors.get_cell_colors()

    def is_inside(self, row, column):
        return 0 <= row < self.NUM_ROWS and 0 <= column < self.NUM_COLS

    def is_empty(self, row, column):
        return self.grid[row][column] == 0

    def clear_full_rows(self):
        completed = 0
        for row in range(self.NUM_ROWS - 1, -1, -1):
            if all(self.grid[row]):
                self.grid[row] = [0] * self.NUM_COLS
                completed += 1
                for r in range(row, 0, -1):
                    self.grid[r] = self.grid[r-1].copy()
        return completed

    def draw(self, screen):
        for row in range(self.NUM_ROWS):
            for column in range(self.NUM_COLS):
                cell_value = self.grid[row][column]
                cell_rect = pygame.Rect(column * self.CELL_SIZE + self.OFFSET, 
                                        row * self.CELL_SIZE + self.OFFSET,
                                        self.CELL_SIZE - 1, 
                                        self.CELL_SIZE - 1)
                pygame.draw.rect(screen, self.colors[cell_value], cell_rect)

class Game:
	def __init__(self):
		self.grid = Grid()
		self.blocks = [IBlock(), JBlock(), LBlock(), OBlock(), SBlock(), TBlock(), ZBlock()]
		self.current_block = self.get_random_block()
		self.next_block = self.get_random_block()
		self.game_over = False
		self.score = 0


	def update_score(self, lines_cleared, move_down_points):
		if lines_cleared == 1:
			self.score += 100
		elif lines_cleared == 2:
			self.score += 300
		elif lines_cleared == 3:
			self.score += 500
		self.score += move_down_points

	def get_random_block(self):
		if len(self.blocks) == 0:
			self.blocks = [IBlock(), JBlock(), LBlock(), OBlock(), SBlock(), TBlock(), ZBlock()]
		block = random.choice(self.blocks)
		self.blocks.remove(block)
		return block

	def move_left(self):
		self.current_block.move(0, -1)
		if self.block_inside() == False or self.block_fits() == False:
			self.current_block.move(0, 1)

	def move_right(self):
		self.current_block.move(0, 1)
		if self.block_inside() == False or self.block_fits() == False:
			self.current_block.move(0, -1)

	def move_down(self):
		self.current_block.move(1, 0)
		if self.block_inside() == False or self.block_fits() == False:
			self.current_block.move(-1, 0)
			self.lock_block()

	def lock_block(self):
		tiles = self.current_block.get_cell_positions()
		for position in tiles:
			self.grid.grid[position.row][position.column] = self.current_block.id
		self.current_block = self.next_block
		self.next_block = self.get_random_block()
		rows_cleared = self.grid.clear_full_rows()
		if rows_cleared > 0:
			self.update_score(rows_cleared, 0)
		if self.block_fits() == False:
			self.game_over = True

	def reset(self):
		self.grid.reset()
		self.blocks = [IBlock(), JBlock(), LBlock(), OBlock(), SBlock(), TBlock(), ZBlock()]
		self.current_block = self.get_random_block()
		self.next_block = self.get_random_block()
		self.score = 0

	def block_fits(self):
		tiles = self.current_block.get_cell_positions()
		for tile in tiles:
			if self.grid.is_empty(tile.row, tile.column) == False:
				return False
		return True

	def rotate(self):
		self.current_block.rotate()
		if self.block_inside() == False or self.block_fits() == False:
			self.current_block.undo_rotation()
		else:
			print('')

	def block_inside(self):
		tiles = self.current_block.get_cell_positions()
		for tile in tiles:
			if self.grid.is_inside(tile.row, tile.column) == False:
				return False
		return True

	def draw(self, screen):
		self.grid.draw(screen)
		self.current_block.draw(screen, 11, 11)
                
		if self.next_block.id == 7: self.next_block.draw(screen, 350, 270)  # Adjust x-coordinate for Z block
		else: self.next_block.draw(screen, 255, 270)
     


def handle_keys(event, game):
    if event.key == pygame.K_LEFT:
        game.move_left()
    elif event.key == pygame.K_RIGHT:
        game.move_right()
    elif event.key == pygame.K_DOWN:
        game.move_down()
    elif event.key == pygame.K_UP:
        game.rotate()
        game.score += 1

def main():
    title_font = pygame.font.Font(None, 50)
    score_font = pygame.font.Font(None, 30)
    
    score_surface = title_font.render("Score", True, Colors.white)
    game_over_surface = title_font.render("GAME OVER", True, Colors.red)
    score_rect = pygame.Rect(320, 55, 170, 60)

    screen = pygame.display.set_mode((500, 620))
    pygame.display.set_caption("TETRIS")
    clock = pygame.time.Clock()

    game = Game()
    GAME_UPDATE = pygame.USEREVENT
    pygame.time.set_timer(GAME_UPDATE, 180)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if game.game_over:
                    if event.key == pygame.K_r:  # Reset the game when "R" is pressed after game over.
                        game.game_over = False
                        game.reset()
                else:
                    handle_keys(event, game)
            if event.type == GAME_UPDATE and not game.game_over:
                game.move_down()

        screen.fill(Colors.new_black)
        game.draw(screen)

        # Draw the Score label and the actual score
        screen.blit(score_surface, score_rect.topleft)
        actual_score_surface = score_font.render(str(game.score), True, Colors.white)
        screen.blit(actual_score_surface, (score_rect.x, score_rect.y + score_surface.get_height()))

        if game.game_over:
            screen_center = screen.get_rect().center
            game_over_rect = game_over_surface.get_rect(center=screen_center)
            screen.blit(game_over_surface, game_over_rect.topleft)

        pygame.display.update()
        clock.tick(60)

if __name__ == "__main__":
    main()
